

<!DOCTYPE html>
<html>
<head>

<title>ruby</title>
<style>

.div1 { 
width:500px; 
height:800px; 
display:inline-block; 
border: 5px solid black; 
background-color: green; 
text-align:center; 
float:left;
} 

.h1	{

color:white;
}


</style>

</head>
<body>

<h1>J'APPREND RUBY AVEC HARRY !!!!!!!!!!</h1>


<div><img src="http://www.cc-sud-territoire.fr/images/entreprendre.jpg"></div>


<div class="div1"> <h1>Les fonctionnalités principales sont :</h1>

l'orientation objet omniprésente ;
le ramasse-miettes chargé de libérer automatiquement la mémoire ;
le système de gestion d'exceptions pour gérer les erreurs exceptionnelles ;
la possibilité de modifier les classes pendant l'exécution du programme, qu'elles soient définies par l'utilisateur ou non ;
l'intégration dans sa syntaxe des expressions rationnelles ;
les blocs qui servent d'itérateur et permettent de passer des morceaux de programme en paramètre ;
l'héritage simple ;
l'inclusion de modules dans les classes, une autre manière de concevoir l'héritage multiple (mixin) ;
l'écriture d'extensions en C relativement simple ;
les nombres entiers de taille illimitée avec conversion automatique lorsque c'est nécessaire14 ;
la portée des variables définie par leur forme : var​ est une variable locale, @var​ est une variable d'instance, @@var​ est une variable de classe, $var​ est une variable globale, Var​ est une constante.
les threads indépendants du système d'exploitation ;
la réflexion, c'est-à-dire la possibilité pour les programmes et les objets de s'inspecter eux-mêmes et de se modifier. </div>

<div class="div1"> <h1>Philosophie</h1>
Ruby est fortement orienté objet et se rapproche ainsi du paradigme objet de Smalltalknote 1 :

toute donnée est un objet, y compris les types ;
toute fonction est une méthode ;
toute variable est une référence à un objet ;
Malgré cet aspect exclusivement objet, la programmation procédurale est possible et fréquente. Ruby utilise une syntaxe simple, inspirée par Eiffel et Ada11.

Le langage est souvent présenté comme évitant au maximum les mauvaises surprises, selon le principe de moindre surprise12. Mais puisqu'il n'est pas possible d'éviter la surprise de tous les utilisateurs, Yukihiro Matsumoto précise qu'il cherche surtout à éviter sa propre surprise13. Ainsi, plus on connaît le langage, plus on connaît la logique de son auteur, et moins on s'étonne des fonctionnalités qu'on découvre.</div> 



<div>
<p><H1>LE JET SKI LES GARS ON PENSE AU JET SKI </H1></p>
<img src="http://www.dumpaday.com/wp-content/uploads/2013/01/man-falls-of-jet-ski-having-a-bad-day.jpg
">
</div>

</body>
</html>







<%= link_to 'About', pages_about_path %>